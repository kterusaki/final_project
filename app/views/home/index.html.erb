<div class='col-xs-12'>
	<div class='title'>
		<h1>eBear.FM</h1>
	</div>

	<div class="col-xs-6 col-xs-offset-3 well" id="player"></div>

	<div class="col-xs-6 col-xs-offset-3">
		<ul class="list-group">
		<!-- Play Queue List -->
		<% @tweets.each do |tweet| %>
			<li class="list-group-item"> <%= tweet.vid_title %> - <span class="twitter-handle">@<%= tweet.from_user %></span></li>
		<% end %>
		</ul>
	</div>
</div>


<%= javascript_tag do %>
	var videos = <%= raw @videos.to_json %>;
<% end %>

<script type="text/javascript">
	// 2. This code loads the IFrame Player API code asynchronously.
	var tag = document.createElement('script');

	tag.src = "https://www.youtube.com/iframe_api";
	var firstScriptTag = document.getElementsByTagName('script')[0];
	firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

	// 3. This function creates an <iframe> (and YouTube player)
	//    after the API code downloads.
	var player;
	var first_vid = videos[0];
	var index = 1;
	function onYouTubeIframeAPIReady() {
		player = new YT.Player('player', {
			height: '390',
			width: '640',
			//videoId: 'M7lc1UVf-VE',
			//videoId: 'J9NQFACZYEU',
			videoId: first_vid,
			events: {
				'onReady': onPlayerReady,
				'onStateChange': onPlayerStateChange
			}
		});
	}

	// 4. The API will call this function when the video player is ready.
	function onPlayerReady(event) {
		event.target.playVideo();
	}

	// 5. The API calls this function when the player's state changes.
	//    The function indicates that when playing a video (state=1),
	//    the player should play for six seconds and then stop.
	//var done = false;
	function onPlayerStateChange(event) {
		if (event.data == 0) {
			//player.stopVideo();
			console.log('ended!');
			if (videos.length > 0) {
				console.log('in if');
    			player.loadVideoById(videos[index]);

    			if (index < videos.length - 1) {
    				console.log('in index if');
    				index++;
    			} else {
    				console.log('in index else');
    				index = 0;
    			}
    			
    			// TODO: Set up playlist like play queue
    			//videos.shift();
    			//done = true;
			} else {
				event.target.playVideo();
			}
		}

		/*if (event.data == YT.PlayerState.PLAYING && !done) {
		  setTimeout(stopVideo, 6000);
		  done = true;
		}*/
	}
		
	function stopVideo() {
		player.stopVideo();
	} 
</script>